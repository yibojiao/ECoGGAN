#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Nov 10 22:32:01 2021

@author: xzy
"""
#%%
import numpy as np
import matplotlib.pyplot as plt
import os
from scipy.signal import welch
from pynwb import NWBFile
from pynwb import TimeSeries
from pynwb import NWBHDF5IO
from PIL import Image
import librosa
import librosa.display
import IPython.display as ipd
from process_nwb.utils import generate_synthetic_data
from process_nwb.resample import resample
from process_nwb.linenoise_notch import apply_linenoise_notch
from process_nwb.common_referencing import subtract_CAR
from process_nwb.wavelet_transform import wavelet_transform
from sklearn.preprocessing import normalize

#%%
io = NWBHDF5IO('EC9_B53.nwb', 'r')
nwbfile_in = io.read()
test_timeseries_in = nwbfile_in.acquisition
trial = nwbfile_in.trials

raw_data = test_timeseries_in["ElectricalSeries"].data
raw_data_read = raw_data[:]
sample_rate = test_timeseries_in["ElectricalSeries"].rate # Hz
new_sample_rate = 500
duration = raw_data.shape[0]/sample_rate
rs_data = resample(raw_data_read, new_sample_rate, sample_rate)
t = np.linspace(0, duration, rs_data.shape[0])

nth_data = apply_linenoise_notch(rs_data, new_sample_rate)
#freq, car_pwr = welch(rs_data[:, 0], fs=new_sample_rate, nperseg=1024)
#_, nth_pwr = welch(nth_data[:, 0], fs=new_sample_rate, nperseg=1024)

#car_data = subtract_CAR(nth_data)
#normed = normalize(car_data, axis=1, norm='l1')

#%% Run first initialize array

index = 0
start = trial.start_time[index]
end = trial.stop_time[index]
condition = trial.condition[index]
a = nth_data[int(start*new_sample_rate):int(end*new_sample_rate),:]
if (len(a)<128):
    a = np.pad(a, [(0, 128-len(a)), (0, 0)],'constant')
b = a[:128,:]
chopped_data = b[:,:128, np.newaxis]
label = [condition]

#%%

for index in range(len(trial)):
    start = trial.start_time[index]
    end = trial.stop_time[index]
    condition = trial.condition[index]
    a = nth_data[int(start*new_sample_rate):int(end*new_sample_rate),:]
    if (len(a)<128):
        a = np.pad(a, [(0, 128-len(a)), (0, 0)],'constant')
    b = a[:128,:128,np.newaxis]
    chopped_data = np.append(chopped_data,b,axis = 2)

chopped_data_trans = chopped_data.T
#%% Run repeat
path = 'C:\\Users\\Kaseya\\Downloads\\process_nwb\\examples\\data1'
#path = 'E:\\data'

for root, _, file_names in os.walk(path):
    for file_name in file_names:
        file_path = os.path.join(root, file_name)
        print(f'Processing {file_path}')
        io = NWBHDF5IO(file_path, 'r')
        nwbfile_in = io.read()
        test_timeseries_in = nwbfile_in.acquisition
        trial = nwbfile_in.trials
        
        raw_data = test_timeseries_in["ElectricalSeries"].data
        raw_data_read = raw_data[:]
        sample_rate = test_timeseries_in["ElectricalSeries"].rate # Hz
        new_sample_rate = 500
        duration = raw_data.shape[0]/sample_rate
        rs_data = resample(raw_data_read, new_sample_rate, sample_rate)
        t = np.linspace(0, duration, rs_data.shape[0])
        
        nth_data = apply_linenoise_notch(rs_data, new_sample_rate)
        
        """index = 0
        start = trial.start_time[index]
        end = trial.stop_time[index]
        condition = trial.condition[index]
        a = nth_data[int(start*new_sample_rate):int(end*new_sample_rate),:]
        if (len(a)<128):
            a = np.pad(a, [(0, 128-len(a)), (0, 0)],'constant')
        b = a[:128,:]
        chopped_data = b[:,:64, np.newaxis]"""
       
        
        for index in range(len(trial)):
            start = trial.start_time[index]
            end = trial.stop_time[index]
            condition = trial.condition[index]
            a = nth_data[int(start*new_sample_rate):int(end*new_sample_rate),:]
            if (len(a)<128):
                a = np.pad(a, [(0, 128-len(a)), (0, 0)],'constant')
            b = a[:128,:128,np.newaxis]
            chopped_data = np.append(chopped_data,b,axis = 2)
            label = np.append(label, condition)
            
#%% normalize all data between -1,1
row, col, lin = chopped_data.shape
for l in range(lin):
    for c in range(col):
        chopped_data[:,c,l] = 2.*(chopped_data[:,c,l] - np.min(chopped_data[:,c,l]))/np.ptp(chopped_data[:,c,l])-1
#%%
chopped_data_image = np.copy(chopped_data)
row, col, lin = chopped_data.shape
for l in range(lin):
    for c in range(col):
        chopped_data_image[:,c,l] = (255*(chopped_data[:,c,l] - np.min(chopped_data[:,c,l]))/np.ptp(chopped_data[:,c,l])).astype(int)
#%%
outdata_T = chopped_data.T
outdata = np.array([chopped_data, label])
outdata_trans = np.array([outdata_T, (label,1,1)])
#%%
outdata_T_eva = chopped_data_image.T
outdata_eva = np.array([chopped_data_image, label])
outdata_eva_trans = np.array([outdata_T_eva, (label,1,1)])
#%%
plt.plot(t3_data[:,7,0])
#%%  
np.save('data_all_eva_T.npy', outdata_eva_trans)
#%%
#t1 = np.load('data.npy')
#t2 = np.load('data1.npy')
t3 = np.load('data_all.npy',allow_pickle = True)
t3_t = t3.T
#np.save('data_all_T.npy', t3_t)
#%%
t3_data = t3[0]
t3_lable = t3[1]
#%%
d = chopped_data[:,:,0]
e = (255*(d - np.min(d))/np.ptp(d)).astype(int)
plt.plot(e)
#%%
image_array = chopped_data[:,:,0]
im = Image.fromarray(e).convert("L")
im.save("test.png")
#%%
im_load = Image.open("test.png")
e_load = np.asarray(im_load)

#%%
data = np.load('data_all_eva.npy',allow_pickle = True)
signal = data[0]
label = data[1]
#%%
for i in range(400):
    image_array = singal[:,:,i]
    im = Image.fromarray(image_array).convert("RGB")
    im.save(f"test{i}.png")
#%%
signal_time = signal[:,:,:1000]
#%%
def plot_spectrogram(Y, sr, hop_length, y_axis="linear"):
    plt.figure(figsize=(25, 10))
    librosa.display.specshow(Y, 
                             sr=sr, 
                             hop_length=hop_length, 
                             x_axis="time", 
                             y_axis=y_axis)
    plt.colorbar(format="%+2.f")
#%%
#n_time = signal_time[:,0,0]
sr = 1
FRAME_SIZE = 64
HOP_SIZE = 8
S_scale = librosa.stft(test_recon, n_fft=FRAME_SIZE, hop_length=HOP_SIZE)
Y_scale = np.abs(S_scale) ** 2
plot_spectrogram(Y_scale, sr, HOP_SIZE)
#%%
Y_log_scale = librosa.power_to_db(Y_scale)
plot_spectrogram(Y_log_scale, sr, HOP_SIZE)
#%%
print()

